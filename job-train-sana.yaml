apiVersion: batch/v1
kind: Job
metadata:
  generateName: ${USER}-job-train-${JOB_SUFFIX}
  labels:
    eidf/user: ${USER}
    kueue.x-k8s.io/queue-name: ${QUEUE_NAME}
    kueue.x-k8s.io/priority-class: batch-workload-priority
spec:
  completions: 1
  parallelism: 1
  completionMode: Indexed
  backoffLimit: 6
  activeDeadlineSeconds: 864000
  ttlSecondsAfterFinished: 2592000
  template:
    metadata:
      labels:
        eidf/user: ${USER}
    spec:
      restartPolicy: OnFailure
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: nvidia.com/gpu.product
                    operator: In
                    values:
                      # - NVIDIA-H200
                      - NVIDIA-A100-SXM4-80GB
      tolerations:
        - key: "eidf098"
          operator: "Equal"
          value: "True"
          effect: "NoSchedule"
        - key: "eidf107"
          operator: "Equal"
          value: "True"
          effect: "NoSchedule"
      containers:
        - name: open-cv-pytorch
          image: demisto/opencv:1.0.0.2034788
          workingDir: "/workspace/Sana"
          env:
            # --- START ADDITION ---
            - name: TZ
              value: "Etc/UTC"
            # --- END ADDITION ---
            - name: DEBIAN_FRONTEND # Keep this one too!
              value: "noninteractive"
            - name: TORCH_NCCL_ASYNC_ERROR_HANDLING
              value: "1"
            - name: NCCL_DEBUG
              value: "INFO"
            - name: NCCL_IB_DISABLE
              value: "1"
            - name: MAX_DELTA
              value: "${MAX_DELTA}"
            - name: NCCL_IB_HCA
              value: "^mlx5"
            - name: PYTHONPATH
              value: "/workspace/Sana"
          command: ["/bin/bash", "-c"]
          args:
            - |-
              
              # Run apt update and install with -y and noninteractive frontend
              apt update && apt install -y --no-install-recommends \
                  wget \
                  git \
                  unzip \
                  zip \
                  libgl1 \
                  libglib2.0-0 \
                  ffmpeg \
                  tzdata \ # Explicitly install tzdata if needed \
                  cmake \
                  libgl1-mesa-glx \
                  libsm6 \
                  libxext6 \
                  libfontconfig1 \
                  libxrender1
              
              apt list --installed | grep libgl1
              
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends git ca-certificates
              echo "Git installed"
              echo "Changing branch to eidf"
              git checkout eidf

              echo "Copying files to /pvc"
              mkdir -p /pvc/Sana/
              cp -r /workspace/Sana/* /pvc/Sana
              cd /pvc/Sana
              ls /pvc/

              # Clean up apt cache
              rm -rf /var/lib/apt/lists/*
              
              python -m pip install --upgrade pip setuptools wheel

              
              echo "Setting up environment..."
              export PYTHONPATH=$PYTHONPATH:/pvc/Sana/
              echo "Python Path"
              echo $PYTHONPATH

              echo "Installing other dependencies..."
              chmod +x environment_setup.sh
              ./environment_setup.sh

              echo "Installing Pytorch"
              pip install torch==2.4.1 torchvision==0.19.1 --index-url https://download.pytorch.org/whl/cu121
              python -c "import torch; print(f'Torch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'CUDA version: {torch.version.cuda}'); print(f'Torch path: {torch.__file__}')"

              pip install pandas
              pip install pyrallis

              echo "Running training script..."
              torchrun --nproc_per_node=1 --master_port=15432 \ 
                        train_scripts/train.py \
                      --config_path=configs/sana_config/512ms/Sana_1600M_img512.yaml \
                      --data.data_dir="[/pvc/MIMIC_ARRANGED/Train]" \
                      --data.type=SanaImgDataset \
                      --model.load_from=hf://Efficient-Large-Model/Sana_1600M_512px/checkpoints/Sana_1600M_512px.pth \
                      --model.multi_scale=false \
                      --train.train_batch_size=256
          resources:
            limits:
              nvidia.com/gpu: "1"
              cpu: "4"
              memory: "96Gi"
          volumeMounts:
            - name: workspace
              mountPath: /workspace
            - name: writeable
              mountPath: /pvc
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: workspace
          nfs:
            server: 10.24.6.77
            path: /user/s2198939-eidf107
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 16Gi
        - name: writeable
          persistentVolumeClaim:
            claimName: mimic-cxr2